import {
    DocumentType,
    getModelForClass,
    index,
    modelOptions,
    pre,
    plugin,
    prop,
    Ref,
} from '@typegoose/typegoose';
import autopopulate from 'mongoose-autopopulate';

// import mongoose from 'mongoose';
import { PacificFungibleToken } from './token.model';
// import { Order } from './order.model';
// import { AssetEventType, AuctionType, TokenStandardVersion, WyvernSchemaName, AssetContractType } from '../types'
export class AssetWhitelist {
    @prop()
    public tokenId: string;
    @prop()
    public tokenAddress: string;
    @prop()
    public email: string;
}
export class WyvernAsset {
    @prop()
    public kind: string;
    @prop()
    public id?: string;
    @prop()
    public address: string;
    @prop()
    public quantity: string;
}
export class PacificTraitStats {
    @prop()
    public kind: string;
    @prop()
    public min: number;
    @prop()
    public max: number;
    @prop()
    public key: string;
    @prop()
    public traitName: string;
}

/**
 * The basis point values of each type of fee
 */
export class PacificFees {
    // Fee for Pacific levied on sellers
    @prop()
    public pacificSellerFeeBasisPoints: number;
    // Fee for Pacific levied on buyers
    @prop()
    public pacificBuyerFeeBasisPoints: number;
    // Fee for the collection owner levied on sellers
    @prop()
    public devSellerFeeBasisPoints: number;
    // Fee for the collection owner levied on buyers
    @prop()
    public devBuyerFeeBasisPoints: number;
}

/**
 * Annotated asset contract with Pacific metadata
 */
// //@plugin(autopopulate)
export class PacificAssetContract extends PacificFees {
    // Name of the asset's contract
    @prop()
    public name: string;
    // Address of this contract
    @prop()
    public address: string;
    // Type of token (fungible/NFT)
    @prop()
    public type: string;
    // Wyvern Schema Name for this contract
    @prop()
    public schemaName: string;

    // Total fee levied on sellers by this contract, in basis points
    @prop()
    public sellerFeeBasisPoints: number;
    // Total fee levied on buyers by this contract, in basis points
    @prop()
    public buyerFeeBasisPoints: number;

    // Description of the contract
    @prop()
    public description: string;
    // Contract's Etherscan / Pacific symbol
    @prop()
    public tokenSymbol: string;
    // Image for the contract
    @prop()
    public imageUrl: string;
    // Object with stats about the contract
    @prop()
    public stats?: string;
    // Array of trait types for the contract
    @prop({ type: () => [PacificTraitStats] })
    public traits?: PacificTraitStats[];
    // Link to the contract's main website
    @prop()
    public externalLink?: string;
    // Link to the contract's wiki, if available
    @prop()
    public wikiLink?: string;
}


/**
 * The Pacific account string appended to orders, providing extra metadata, profile images and usernames
 */
export class PacificAccount {
    // Wallet address for this account
    @prop()
    public address: string;
    // Public configuration info, including "affiliate" for users who are in the Pacific affiliate program
    @prop()
    public config: string;

    // This account's profile image - by default, randomly generated by the server
    @prop()
    public profileImgUrl: string;

    // More information explicitly set by this account's owner on Pacific
    @prop()
    public user?: string;
}

/**
 * Defines a Transaction type.
 */
//@plugin(autopopulate)
export class Transaction {
    // The details about the account that sent the transaction
    @prop({ type: () => PacificAccount })
    public fromAccount: PacificAccount;

    // The details about the account that received the transaction
    @prop({ type: () => PacificAccount })
    public toAccount: PacificAccount;

    // Date when the transaction was created
    @prop()
    public createdDate: Date;

    // Date when the transaction was modified
    @prop()
    public modifiedDate: Date;

    // The transaction hash
    @prop()
    public transactionHash: string;

    // The index of the transaction within the block
    @prop()
    public transactionIndex: string;

    // The number of the block in which this transaction resides
    @prop()
    public blockNumber: string;

    // The hash of the block in which this transaction resides
    @prop()
    public blockHash: string;

    // The timestamp of the transaction
    @prop()
    public timestamp: Date;
}



/**
 * Defines a AssetEvent type which contains details about an event that occurred
 */
//@plugin(autopopulate)
export class AssetEvent {

    // The type of event
    @prop()
    public eventType: string;

    // The timestamp of the transaction (if on-chain) or when the off-chain occurred
    @prop()
    public eventTimestamp: Date;

    // The auction type
    @prop()
    public auctionType: string;

    // The total price of the sale in the payment
    @prop()
    public totalPrice?: string;

    // The transaction associated with the token sale
    @prop({ type: () => Transaction })
    public transaction?: Transaction;

    // Details about the token used in the payment for this asset
    @prop({ type: () => PacificFungibleToken })
    public paymentToken?: PacificFungibleToken;
}



/**
 * Annotated collection with Pacific metadata
 */
//@plugin(autopopulate)
export class PacificCollection extends PacificFees {
    // Name of the collection
    @prop()
    public name: string;
    // Slug, used in URL
    @prop()
    public slug: string;
    // Accounts allowed to edit this collection
    @prop({ type: () => [String] })
    public editors: string[];
    // Whether this collection is hidden from the homepage
    @prop()
    public hidden: boolean;
    // Whether this collection is featured
    @prop()
    public featured: boolean;
    // Date collection was created
    @prop()
    public createdDate: Date;

    // Description of the collection
    @prop()
    public description: string;
    // Image for the collection
    @prop()
    public imageUrl: string;
    // Image for the collection, large
    @prop()
    public largeImageUrl: string;
    // Image for the collection when featured
    @prop()
    public featuredImageUrl: string;
    // Object with stats about the collection
    @prop()
    public stats: string;
    // Data about displaying cards
    @prop()
    public displayData: string;
    // Tokens allowed for this collection
    @prop({ type: () => [PacificFungibleToken] })
    public paymentTokens: PacificFungibleToken[];
    // Address for dev fee payouts
    @prop()
    public payoutAddress?: string;
    // Array of trait types for the collection
    @prop({ type: () => PacificTraitStats })
    public traitStats?: PacificTraitStats;
    // Link to the collection's main website
    @prop()
    public externalLink?: string;
    // Link to the collection's wiki, if available
    @prop()
    public wikiLink?: string;
}


/**
 * Annotated asset spec with Pacific metadata
 */
// //@plugin(autopopulate)
export class PacificAsset {
    // The asset's token ID, or null if ERC-20
    @prop()
    public tokenId: string;
    // The asset's contract address
    @prop()
    public tokenAddress: string;
    // The Wyvern schema name (e.g. "ERC721") for this asset
    @prop()
    public schemaName?: string;
    // The token standard version of this asset
    @prop()
    public version?: string;
    // Optional for fungible items
    @prop()
    public decimals?: number;
    @prop({ type: () => PacificAssetContract })
    public assetContract?: PacificAssetContract;
    @prop({ type: () => PacificCollection })
    public collections?: PacificCollection;
    // The asset's given nameOptional for ENS names
    @prop()
    public name?: string;
    // Description of the asset
    @prop()
    public description?: string;
    // Owner of the asset
    @prop({ type: () => PacificAccount })
    public owner?: PacificAccount;
    // // Orders on the asset. Null if asset was fetched in a list
    // @prop({ type: () => Order })
    // public orders: Ref<Order>[];
    // // Buy orders (offers) on the asset. Null if asset in a list and didn't prefetch buy orders
    // @prop({ type: () => Order })
    // public buyOrders: Ref<Order>[];
    // // Sell orders (auctions) on the asset. Null if asset in a list and didn't prefetch sell orders
    // @prop({ type: () => Order })
    // public sellOrders: Ref<Order>[];

    // Whether the asset is on a pre-sale (so token ids aren't real)
    @prop()
    public isPresale: boolean;
    // The cached and size-optimized image url for this token
    @prop()
    public imageUrl: string;
    // The image preview url for this token.
    // Note: Loses gif animation and may have issues with SVGs
    @prop()
    public imagePreviewUrl: string;
    // The original image url for this token
    @prop()
    public imageUrlOriginal: string;
    // Thumbnail url for this token
    @prop()
    public imageUrlThumbnail: string;
    // Link to token on Pacific
    @prop()
    public pacificLink: string;
    // Link to token on dapp's site
    @prop()
    public externalLink: string;
    // Array of traits on this token
    @prop({ type: () => [PacificTraitStats] })
    public traits?: PacificTraitStats[];
    // Number of times this token has been traded (sold)
    @prop()
    public numSales: number;
    // Data about the last time this token was sold
    @prop({ type: () => AssetEvent })
    public lastSale?: AssetEvent;
    // The suggested background color for the image url
    @prop()
    public backgroundColor?: string;
    // The per-transfer fee; in base units; for this asset in its transfer method
    @prop()
    public transferFee?: string;
    // The transfer fee token for this asset in its transfer method
    @prop({ type: () => PacificFungibleToken })
    public transferFeePaymentToken?: PacificFungibleToken;
}


// export class WyvernAssetBase {
//     @prop()
//     public id?: string;
//     @prop()
//     public address: string;
// }

// // A Enum is used to easily keep track of different types, instead of hardcoding it in many places
// export enum WyvernAssetTypes {
//     WyvernNFTAsset = 'WyvernNFTAsset',
//     WyvernFTAsset = 'WyvernFTAsset',
// }

// export class WyvernNFTAsset extends WyvernAssetBase {

// }
// export class WyvernFTAsset extends WyvernAssetBase {
//     @prop()
//     public quantity: string;
// }

